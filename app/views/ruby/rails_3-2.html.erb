<div id="contents">
  <div id=back_ruby>
    <div id="back_stars"></div><div id="back_stars2"></div><div id="back_stars3"></div>
  </div>
  <div id="header">
    <div id="header_left">
      <a href="/">
        <p>Of the Engineer</p>
        <p>By the Engineer</p>
        <p>For the Engineer</p>
      </a>
    </div>
    <nav class="menu_ruby">
      <input type="checkbox" href="#" class="menu-open" name="menu-open" id="menu-open"/>
      <label class="menu-open-button" for="menu-open">Rails</label>
      <%= render :partial => "rails_3-2Header" %>
    </nav>
    <%= render :partial => "/common/index_svg" %>
    <div id="header_right_ruby">
      <div id="header_right_ruby_search">
        <input type="text" placeholder="Search...使用不可">
        <div class="search"></div>
      </div>
    </div>
    <%= render :partial => "/common/header_clock" %>
  </div>
  <div class="Ruby_main">
    <div class="Ruby_main_center">
      <h1 class="topH">deviseの使い方</h1>
      <ul>
        <li><a href="#1" >deviseって何？</a></li>
        <li><a href="#2" >実際に実装してみる！</a></li>
        <li><a href="" >deviseって何？</a></li>
        <li><a href="" >deviseって何？</a></li>
      </ul>
      <div class="detail_images">
        <%= image_tag "devise.png" ,style:"width:64.3%;"%>
        <%= image_tag "devise2.jpg" ,style:"width:35.7%;"%>
      </div>
      <h1 class="categoryH" id="1">deviseって何？&emsp;&emsp;&emsp;<a href="https://github.com/plataformatec/devise">＜公式ドキュメント＞</a></h1>
      <p class="detail">deviseは、Rails上でログイン・ログアウト等の<span>認証機能</span>を簡単に実装出来るgemです。</p>
      <p class="detail">&emsp;</p>
      <p class="detail">認証機能を自分で実装しようと思うとどうしても工数がかかったり、安全性の面で不安が出てきてしまいます。</p>
      <p class="detail">deviseというgemを使えば、コマンドを何度か打つだけで簡単に認証機能を実装することができます！</p>
      <p class="detail">そして、会員登録からログイン認証が必要なページの管理等が容易に行えるようになります。</p>
      <p class="detail">&emsp;</p>
      <p class="detail">deviseは、10個のモジュールで構成されています。</p>
      <div class="detail_box">
        <p class="detail">・<span>データベース確認機能</span></p>
        <p class="detail_hover">&emsp;ログイン中にユーザーの信頼性を検証するために、パスワードをハッシュしてデータベースに保存します。</p>
        <p class="detail_hover">&emsp;認証は、POST要求またはHTTP基本認証の両方で実行できます。</p>
        <p class="detail">・<span><a href="https://github.com/omniauth/omniauth">Omniauth</a>機能</span></p>
        <p class="detail_hover">&emsp;OmniAuthのサポートを追加します。</p>
        <p class="detail">・<span>確認機能</span></p>
        <p class="detail_hover">&emsp;確認手順を記載したメールを送信し、サインイン時にアカウントが既に確認されているかどうかを確認します。</p>
        <p class="detail">・<span>回復機能</span></p>
        <p class="detail_hover">&emsp;ユーザーパスワードをリセットし、リセットの指示を送信します。</p>
        <p class="detail">・<span>登録機能</span></p>
        <p class="detail_hover">&emsp;登録プロセスを通じてユーザーのサインアップを処理し、ユーザーがアカウントを編集および破棄できるようにします。</p>
        <p class="detail">・<span>覚えやすい</span></p>
        <p class="detail_hover">&emsp;保存されたCookieからユーザーを記憶するためのトークンの生成とクリアを管理します。</p>
        <p class="detail">・<span >追跡機能</span></p>
        <p class="detail_hover">&emsp;サインイン数、タイムスタンプ、およびIPアドレスを追跡します。</p>
        <p class="detail">・<span>タイムアウト機能</span></p>
        <p class="detail_hover">&emsp;指定期間内にアクティブでなかったセッションを期限切れにします。</p>
        <p class="detail">・<span>検証機能</span></p>
        <p class="detail_hover">&emsp;電子メールとパスワードの検証を提供します。これはオプションであり、カスタマイズできるため、独自の検証を定義できます。</p>    
        <p class="detail">・<span>ロック機能</span></p>
        <p class="detail_hover">&emsp;指定された回数ログインに失敗すると、アカウントをロックします。</p>
        <p class="detail_hover">&emsp;電子メールを介して、または指定された期間後にロック解除できます。</p>
      </div>

      <h1 class="categoryH" id="2">実際に実装してみる！</h1>
      <p class="detail">Devise 4.0はRails 4.1以降で動作します。 Gemfileに次の行を追加します。</p>
      <div id="SourceCode">
        <p class="head">Gemfile</p>
        <p class="main"><span class="blue">gem</span> <span class="orange">'devise'</span></p>
      </div>
      <p class="detail">bundle installを実行し,Gemfileに追記したgemをインストールします。</p>
      <div id="SourceCode">
        <p class="head">ターミナル</p>
        <p class="main"><span class="terminal">$ bundle install</span></p>
      </div>
      <p class="detail">deviseの設定ファイルをrailsアプリケーションにインストールするために次のコマンドを打ちます。</p>
      <div id="SourceCode" style="padding:0; margin-bottom:0;">
        <p class="head">ターミナル</p>
        <p class="main"><span class="terminal">$ rails generate devise:install</span></p>
      </div>
      <p class="detail">実行後は、以下のようになります。</p>
      <div id="SourceCode" style="margin:10px 0 20px;">
        <p class="main_many"><span class="terminal">$ rails generate devise:install</span></p>
        <p class="main_many"><span class="terminal">&emsp;create  config/initializers/devise.rb</span></p>
        <p class="main_many"><span class="terminal">&emsp;create  config/locales/devise.en.yml</span></p>
        <p class="main_many"><span class="terminal">================================================</span></p>
        <p class="main_many"><span class="terminal">Some setup you must do manually if you haven't yet:</span></p>
        <p class="main_many"><span class="terminal">1. Ensure you have defined default url options in your environments files. Here
     is an example of default_url_options appropriate for a development environment
     in config/environments/development.rb:</span></p>
        <p class="main_many"><span class="terminal">&emsp;&emsp;config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }</span></p>
        <p class="main_many"><span class="terminal">&emsp;In production, :host should be set to the actual host of your application.</span></p>
        <p class="main_many"><span class="terminal">2. Ensure you have defined root_url to *something* in your config/routes.rb.</span></p>
        <p class="main_many"><span class="terminal">&emsp;For example:</span></p>
        <p class="main_many"><span class="terminal">&emsp;&emsp;root to: "home#index"</span></p>
        <p class="main_many"><span class="terminal">3. Ensure you have flash messages in app/views/layouts/application.html.erb.</span></p>
        <p class="main_many"><span class="terminal">&emsp;For example:</span></p>
        <p class="main_many"><span class="terminal">&emsp;&emsp;&lt;p class="notice"&gt;&lt;%= notice %&gt;&lt;/p&gt;</span></p>
        <p class="main_many"><span class="terminal">&emsp;&emsp;&lt;p class="alert"&gt;&lt;%= alert %&gt;&lt;/p&gt;</span></p>
        <p class="main_many"><span class="terminal">4. You can copy Devise views (for customization) to your app by running:</span></p>
        <p class="main_many"><span class="terminal">&emsp;&emsp;rails g devise:views</span></p>
        <p class="main_many"><span class="terminal">================================================</span></p>
      </div>
      <p class="detail">ここで表示されるメッセージについて、解説していきます。</p>
      <div class="detail_box">
        <p class="detail">1. <span>deviseメーラーのデフォルトURLオプションを設定します。</span></p>
        <p class="detail">&emsp;config/environments/development.rbに以下の記述を追記します。</p>
        <div id="SourceCode" style="padding:0; margin-bottom:10px;">
          <p class="head">config/environments/development.rb</p>
          <p class="main"><span class="rightblue">config</span>.<span class="rightblue">action_mailer</span>.<span class="rightblue">default_url_options</span> = { <span class="blue">host:</span> <span class="orange">'localhost'</span>, <span class="blue">port:</span> <span class="green">3000</span> }</p>
        </div>
        <p class="detail">2. <span>ルートを設定します。</span> </p>
        <p class="detail">&emsp;deviseだと会員登録完了後などにルートに飛ぶ設定になっているため、あらかじめ「config/routes.rb」でルートを設定する必要があります。</p>
        <p class="detail">&emsp;以下の例のように、config/routes.rbにルートを設定します。</p>
        <div id="SourceCode" style="padding:0; margin-bottom:10px;">
          <p class="head">例）config/routes.rb</p>
          <p class="main">root <span class="blue">to:</span> <span class="orange">"home#index"</span></p>
        </div>
        <p class="detail">3. <span>エラーメッセージ用のタグをビューに埋め込みます。</span></p>
        <p class="detail">&emsp;app/views/layouts/application.html.erbのbody内に以下の記述を追記します。</p>
        <p class="detail">&emsp;ログインした際やログアウトした際、フォームの送信エラーなど簡単な通知をしたい場合に使用します。 </p>
        <div id="SourceCode" style="padding:0; margin-bottom:10px;">
          <p class="head">app/views/layouts/application.html.erb</p>
          <p class="main_many">&lt;<span class="blue">p</span> <span class="rightblue">class</span>=<span class="orange">"notice"</span>&gt;<span class="blue">&lt;%=</span> notice <span class="blue">%&gt;</span>&lt;/<span class="blue">p</span>&gt;</p>
          <p class="main_many">&lt;<span class="blue">p</span> <span class="rightblue">class</span>=<span class="orange">"alert"</span>&gt;<span class="blue">&lt;%=</span> alert <span class="blue">%&gt;</span>&lt;/<span class="blue">p</span>&gt;</p>
        </div>
        <p class="detail">4. <span>deviseのビューをカスタマイズする時は下記のコマンドを実行します。</span></p>
        <p class="detail">&emsp;deviseでは認証周りのビューファイルは最初から用意されています。</p>
        <p class="detail">&emsp;しかしデフォルトのビューは非常に簡素な為、以下のコマンドを実行しビューファイルを作成・編集することができます。</p>
        <p class="detail">&emsp;deviseファイル作成後、新規登録ビューは app/views/devise/registrations/new.html.erb、</p>
        <p class="detail">&emsp;ログインビューは app/views/devise/sessions/new.html.erbに作成されます。</p>
        <div id="SourceCode" style="margin-bottom:20px;">
          <p class="head">ターミナル</p>
          <p class="main"><span class="terminal">$ rails g devise:views</span></p>
        </div>
      </div>
      <p class="detail">&emsp;次のコマンドを打ち、ログイン認証に必要なファイルを生成します。</p>
      <div id="SourceCode" style="padding:0; margin-bottom:0;">
        <p class="head">ターミナル<span id="pre">プレビュー</span>
          <%= video_tag("rails g devise User.mp4", controlls: true,autoplay: true,muted:true) %> 
        </p>
        <p class="main"><span class="terminal">$ rails generate devise User</span></p>
      </div>
    </div>
  </div>
</div>
<%= render :partial => "/common/loading" %>